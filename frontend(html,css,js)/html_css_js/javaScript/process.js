// JavaScript Hoisting(호이스팅) 이슈
// 호이스팅이란, 끌어 올린다 라는 의미를 갖고 있다.
// javaScript 에서는 선언을 하지 않은 함수나 변수를 코드 상단에서 사용을할 수 있다,, 이런 이슈들로 생기는 이슈를 호이스팅 이슈라고 한다.

// Var 키워드 ------------------------

// var 키워드는 let과 같이 변수 선언에 쓰이는 키워드로, let과 달리 동일한 이름의 변수를 여러번 선언할 수 있다.
// 그냥 안쓰는게 나을 듯,,,
var n = 1;
var n = 2; // 동일한 변수를 계속해서 사용해도 에러가 발생안되는걸 볼 수 있음

console.log(a); // 원래라면 선언되지 않았다 라는 에러가 출력되어야 하지만 var를 통한 선언시, 에러가 나지 않고 undefined 가 출력 되는것을 볼 수 있다.
a = 10;
console.log(a);
var a = 20;

// 함수의 경우도 동일합니다..

// 왜 이런 현상이 생길까요?
// javaScript 에서는 선언과 초기화 문법을 동시에 쓸 수 있다 (var a = 1;) 처럼,,
// 하지만, 내부적으로 javaScript는 함수와 변수 선언 부분만 분리해서, 실행 영역 맨 앞으로 이동해서 실행한다.
// 따라서 Hoisting 현상이 일어난 변수는 변수를 선언만 한 상태이므로 값이 아직 초기화되지 않았기 때문에 undefined가 들어가 있게 됨..

// 해결방안은
// 1. 변수 선언의 경우, let과 const 키워드만 사용할 것을 권장한다.
// 2. 함수 선언의 경우 함수 표현식으로 사용할 것을 권장.

// 함수 선언식
function func1() {}
// 함수 표현식 (이런식으로)
let func2 = function () {};

// Scope --------------------=-=-=-=-=-=-=-=-=-=-=-=

// scope 란 javaScript 변수 또는 함수 선언시, 해당 변수 또는 함수가 유효한 범위를 의미.
// Global(전역), Function(함수), Block(블록) 이 3가지 scopre 가 있다.

// 전역 = 어디에서나 사용할 수 있는 변수
// 블록 =  { } 안에서 사용할 수 있는 변수 (if문 for문 생각하면 편함)
// 함수 =
